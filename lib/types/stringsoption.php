<?php
declare(strict_types=1);

namespace Claramente\Options\Types;

use Bitrix\Main\HttpRequest;
use Claramente\Options\Structures\Entity\OptionEntityStructure;
use CAdminForm;

/**
 * –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫. –û–ø—Ü–∏—è –¥–ª—è –º–æ–¥—É–ª—è claramente.options
 */
class StringsOption extends AbstractOption
{
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    public const DEFAULT_FIELDS = 2;

    // –î–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ª–∏–Ω–∏–∏
    public const DEFAULT_SPLIT_FIELDS = 3;

    /**
     * @return string
     */
    public static function getName(): string
    {
        return '–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫';
    }

    /**
     * @return string
     */
    public static function getCode(): string
    {
        return 'strings';
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ value –∏–∑ –ë–î
     * @param OptionEntityStructure $option
     * @return mixed
     */
    public function getValue(OptionEntityStructure $option): array
    {
        $value = null;
        if ($option->value) {
            $value = unserialize($option->value);
        }

        return is_array($value) ? $value : array_fill(0, $this->getNumberFields($option), '');
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.
     * Null –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏
     * @param OptionEntityStructure $option
     * @param array|string|null $value
     * @return string|null
     */
    public function getValueBeforeSave(
        OptionEntityStructure $option,
        mixed                 $value,
    ): ?string
    {
       return is_array($value) ? serialize($value) : null;
    }

    /**
     * –í—ã–≤–æ–¥ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
     * @param string $postName
     * @param CAdminForm $form
     * @param OptionEntityStructure $option
     * @return void
     */
    public function getFormFieldValue(
        string                $postName,
        CAdminForm            &$form,
        OptionEntityStructure $option
    ): void
    {
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        $numberFields = $this->getNumberFields($option);
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å—Ç—Ä–æ–∫–∏
        $numberSplitFields = $this->getNumberSplitFields($option);

        $values = $option->getValue();

        // –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –≤–≤–æ–¥–∞
        $form->BeginCustomField($postName,  $option->name);
        // –®–∞–ø–∫–∞
        echo $this->getFieldHeader($option);
        for ($i = 0; $i < $numberFields; $i++) {
            $fieldId = sprintf('%s[%d]', $postName, $i);
            echo $this->getFieldInput($fieldId, is_string($values[$i] ?? null) ? htmlspecialchars($values[$i]) : null);
            // –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ <br>
            if ($i > 0 && ($i + 1) % $numberSplitFields === 0) {
                echo '<br><br>';
            }
        }
        // –ü–æ–¥–≤–∞–ª
        echo $this->getFieldFooter();
        $form->EndCustomField($postName);
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
     * @param HttpRequest $request
     * @param CAdminForm &$form
     * @param OptionEntityStructure $option
     * @return void
     */
    public function getFormFieldSettings(
        HttpRequest           $request,
        CAdminForm            &$form,
        OptionEntityStructure $option
    ): void
    {
        $form->AddSection('option-settings', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–π—Å—Ç–≤–∞');
        $form->AddEditField('option[settings][fields]', 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫', false, [], $this->getNumberFields($option));
        $form->AddEditField('option[settings][split]', 'üñáÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫', false, [], $this->getNumberSplitFields($option));
    }

    /**
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–ø—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @param OptionEntityStructure $option
     * @return int
     */
    protected function getNumberFields(OptionEntityStructure $option): int
    {
        return intval($this->getSettingValue($option, 'fields', $this::DEFAULT_FIELDS)) ?: $this::DEFAULT_FIELDS;
    }

    /**
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–ø—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @param OptionEntityStructure $option
     * @return int
     */
    protected function getNumberSplitFields(OptionEntityStructure $option): int
    {
        return intval($this->getSettingValue($option, 'split', $this::DEFAULT_SPLIT_FIELDS)) ?: $this::DEFAULT_SPLIT_FIELDS;
    }

    /**
     * –ü–æ–ª–µ –≤–≤–æ–¥–∞
     * @param string $name
     * @param string|null $value
     * @return string
     */
    protected function getFieldInput(string $name, ?string $value): string
    {
        return '<input type="text" name="' . $name . '" value="' . $value . '" style="margin-right: 10px;margin-top:3px;margin-bottom:0px;">';
    }
}

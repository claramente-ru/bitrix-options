<?php
declare(strict_types=1);

namespace Claramente\Options\Types;

use Bitrix\Main\HttpRequest;
use Claramente\Options\Structures\Entity\OptionEntityStructure;
use CAdminForm;

/**
 * –°–ø–∏—Å–æ–∫. –û–ø—Ü–∏—è –¥–ª—è –º–æ–¥—É–ª—è claramente.options
 */
class SelectOption extends AbstractOption
{
    /**
     * @return string
     */
    public static function getName(): string
    {
        return '–°–ø–∏—Å–æ–∫';
    }

    /**
     * @return string
     */
    public static function getCode(): string
    {
        return 'select';
    }

    /**
     * –í—ã–≤–æ–¥ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
     * @param string $postName
     * @param CAdminForm $form
     * @param OptionEntityStructure $option
     * @return void
     */
    public function getFormFieldValue(
        string                $postName,
        CAdminForm            &$form,
        OptionEntityStructure $option
    ): void
    {
        $values = [
            null => '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        ];
        $settings = is_string($option->settings) ? unserialize($option->settings) : null;
        if (
            $settings
            && ! empty($settings['values'])
            && is_array($settings['values'])
        ) {
            $values = array_merge($values, $settings['values']);
        }

        $form->AddDropDownField(
            id: $this->getPostOptionId($postName, $option),
            content: trim($option->name . ' ' . $option->siteId),
            required: false,
            arSelect: $values,
            value: $option->value
        );
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @param HttpRequest $request
     * @param OptionEntityStructure $option
     * @return string|null
     */
    public function beforeSaveSettings(HttpRequest $request, OptionEntityStructure $option): ?string
    {
        $values = $request->getPost('option')['settings']['values'] ?? [];

        return serialize([
            'values' => array_filter($values)
        ]);
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
     * @param HttpRequest $request
     * @param CAdminForm &$form
     * @param OptionEntityStructure $option
     * @return void
     */
    public function getFormFieldSettings(
        HttpRequest           $request,
        CAdminForm            &$form,
        OptionEntityStructure $option
    ): void
    {
        $selectIndex = 0;
        $form->AddSection('option-settings', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–π—Å—Ç–≤–∞');
        $settings = unserialize($option->settings ?: '');
        if ($settings && ! empty($settings['values'])) {
            foreach ($settings['values'] as $value) {
                $form->AddEditField('option[settings][values][' . $selectIndex . ']', 'üìë –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞', false, [], $value);
                $selectIndex++;
            }
        }
        $form->AddEditField('option[settings][values][' . $selectIndex . ']', 'üìë –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞', false);
        $form->BeginCustomField('option-add', 'test test');
        echo '
<tr>
<td></td>
<td><input type="button" value="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" title="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" onclick="addNewElement()" class="adm-btn"></td>
<td></td>
<script>
        function addNewElement() {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            let elements = document.querySelectorAll(\'tr[id^="tr_option[settings][values]"]\');
            let lastElement = elements[elements.length - 1]
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
            let lastIndex = lastElement ? parseInt(lastElement.id.match(/\d+/)[0]) : -1;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 1
            let newIndex = lastIndex + 1;
            
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            let newElement = lastElement.cloneNode(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º id –∏ name –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            newElement.id = `tr_option[settings][values][${newIndex}]`;
            let input = newElement.querySelector(\'input[type="text"]\');
            input.name = `option[settings][values][${newIndex}]`;
            input.value = ""; // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º –ø–æ–ª–µ
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            lastElement.insertAdjacentElement("afterend", newElement);
        }
    </script>
</tr>
';
        $form->EndCustomField('option-add', '');
    }
}
